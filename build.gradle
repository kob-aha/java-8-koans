/**
 * Copyright 2012 The original author or authors
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

import java.awt.Desktop

apply plugin: 'java'

version = '0.0.1'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

task removeSolutions << {
    def solutionsRemoved = 0
    def solutionRegex = $/(?sm)(// -{12} START EDITING HERE -{22})(.*?)(\s+// -{12} STOP EDITING HERE  -{22})/$
    sourceSets.test.allSource.files.each { File sourceFile ->
        solutionsRemoved += (sourceFile.text =~ solutionRegex).count
        sourceFile.text = sourceFile.text.replaceAll(solutionRegex, '$1\n\n$3')
    }
    println "Removed $solutionsRemoved solutions from Koans. Good luck!"
}

// Adapted from http://www.practicalgradle.org/blog/2011/01/convenient-test-execution-with-camel-case-support/
tasks.addRule('Pattern: koan<Number>: Runs a single Koan') { String taskName ->
    if (taskName.startsWith('koan') && taskName.length() > 5) {
        // create a dummy task for the task name specified on the command line
        def dummyTask = task(taskName)
        def koanName = taskName[0].toUpperCase() + taskName[1..-1]

        println(tasks.withType(Test))

        // make all Test tasks a dependency of the dummy task and make sure only the koan test is executed
        tasks.withType(Test) { testTask ->
            logger.info("Single Koan Execution: apply include pattern to Test task <$testTask.name>")
            testTask.properties['test.single'] = koanName
            dummyTask.dependsOn testTask
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

// show welcome message
task sayHello << {
    List<String> lines = file('gradle/one-liners.txt').readLines()
    def quote = lines.get(new Random().nextInt(lines.size() - 1))
    println "Groovy Koans ${version}:\n${quote}"
    println "${'-' * quote.size()}\n"
}

// TODO Update quotes file
//test.dependsOn sayHello

// launch browser if test failed. otherwise show that koan is complete
gradle.taskGraph.afterTask { task, taskState ->
    if (task.name != 'test')
        return

    if (taskState.failure) {
        def reportFile = task.reports.html.entryPoint
        Desktop.desktop.browse(reportFile.toURI())
    } else {
        println "Koan is complete. Well done!"
    }
}

// since we're running in quiet logging, show the user what tests are running
tasks.withType(Test) { testTask ->
    testTask.beforeTest { descriptor ->
        print "Running exercises in $descriptor.name()".padRight(60, '.')
    }
    testTask.afterTest { descriptor, result ->
        println result.resultType
    }
}
